version: 0.2

phases:
  pre_build:
    commands:
      - echo "Logging in to ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY_URI
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - TIMESTAMP=$(date +%Y%m%d%H%M%S)
      - IMAGE_TAG=${COMMIT_HASH}-${TIMESTAMP}

  build:
    commands:
      - echo "Building Docker image..."
      - docker build --pull --no-cache -t $ECR_REPOSITORY_URI:$IMAGE_TAG .

  post_build:
    commands:
      - echo "Pushing image to ECR..."
      - docker push $ECR_REPOSITORY_URI:$IMAGE_TAG
      - echo "Updating task definition..."
      - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --region $AWS_DEFAULT_REGION)
      - echo "Modifying task definition..."
      - NEW_DEFINITION=$(echo "$TASK_DEFINITION" | jq '.taskDefinition | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .registeredThrough) | .containerDefinitions[0].image = "'"$ECR_REPOSITORY_URI:$IMAGE_TAG"'"')
      - echo "Registering new task definition..."
      - aws ecs register-task-definition --cli-input-json "$NEW_DEFINITION" --region $AWS_DEFAULT_REGION
      - echo "Triggering ECS deployment..."
      - aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --task-definition $ECS_TASK_DEFINITION --force-new-deployment --region $AWS_DEFAULT_REGION

artifacts:
  files:
    - build/imagedefinitions.json
  discard-paths: yes
